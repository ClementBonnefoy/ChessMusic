
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Apr 24 16:20:55 CEST 2015
//----------------------------------------------------

package sml.compiler;

import sml.elements.*;
import sml.interfaces.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Apr 24 16:20:55 CEST 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\002\004\000\002\003" +
    "\002\000\002\003\003\000\002\004\007\000\002\004\010" +
    "\000\002\006\003\000\002\006\005\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\011\003\000\002\011" +
    "\004\000\002\011\005\000\002\011\003\000\002\036\005" +
    "\000\002\036\004\000\002\036\005\000\002\041\003\000" +
    "\002\041\005\000\002\041\003\000\002\041\005\000\002" +
    "\012\005\000\002\005\006\000\002\014\002\000\002\014" +
    "\005\000\002\016\003\000\002\016\003\000\002\015\004" +
    "\000\002\017\005\000\002\007\003\000\002\007\005\000" +
    "\002\007\003\000\002\034\005\000\002\032\005\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\040" +
    "\023\000\002\033\002\000\002\033\003\000\002\033\003" +
    "\000\002\021\004\000\002\021\004\000\002\021\003\000" +
    "\002\020\004\000\002\020\005\000\002\020\003\000\002" +
    "\020\003\000\002\022\005\000\002\023\005\000\002\042" +
    "\003\000\002\042\005\000\002\042\003\000\002\042\003" +
    "\000\002\010\003\000\002\010\005\000\002\010\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\030\005\000\002\031" +
    "\005\000\002\031\006\000\002\013\003\000\002\013\004" +
    "\000\002\037\003\000\002\026\003\000\002\026\003\000" +
    "\002\025\005\000\002\024\005\000\002\027\003\000\002" +
    "\027\003\000\002\043\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\006\015\004\017\uffff\001\002\000\006\032" +
    "\012\035\011\001\002\000\004\017\165\001\002\000\004" +
    "\002\163\001\002\000\006\015\010\017\ufffe\001\002\000" +
    "\006\032\012\035\011\001\002\000\046\004\uffb5\007\uffb5" +
    "\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\016\uffb5\024" +
    "\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5" +
    "\033\uffb5\034\uffb5\035\uffb5\001\002\000\046\004\uffb4\007" +
    "\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\016\uffb4" +
    "\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032" +
    "\uffb4\033\uffb4\034\uffb4\035\uffb4\001\002\000\004\013\014" +
    "\001\002\000\036\007\024\011\033\016\045\023\031\024" +
    "\022\025\016\026\043\027\042\030\044\031\021\032\012" +
    "\033\035\034\032\035\011\001\002\000\004\004\162\001" +
    "\002\000\026\007\062\011\033\024\022\025\016\026\043" +
    "\030\044\031\021\032\012\033\035\035\011\001\002\000" +
    "\006\004\ufff7\010\ufff7\001\002\000\006\004\ufff4\010\ufff4" +
    "\001\002\000\006\006\154\034\153\001\002\000\026\007" +
    "\062\011\033\024\022\025\016\026\043\030\044\031\021" +
    "\032\012\033\035\035\011\001\002\000\006\004\ufff9\010" +
    "\ufff9\001\002\000\036\007\024\011\033\016\045\023\031" +
    "\024\022\025\016\026\043\027\042\030\044\031\021\032" +
    "\012\033\035\034\032\035\011\001\002\000\006\004\ufff6" +
    "\010\ufff6\001\002\000\042\004\uffc1\007\uffc1\010\uffc1\011" +
    "\uffc1\012\uffc1\014\uffc1\016\uffc1\024\uffc1\025\uffc1\026\uffc1" +
    "\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\035\uffc1\001" +
    "\002\000\042\004\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3" +
    "\014\uffc3\016\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\035\uffc3\001\002\000\042" +
    "\004\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\014\uffc0\016" +
    "\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0" +
    "\032\uffc0\033\uffc0\035\uffc0\001\002\000\014\007\117\023" +
    "\120\032\112\035\011\036\113\001\002\000\042\004\uffba" +
    "\007\uffba\010\uffba\011\uffba\012\uffba\014\uffba\016\uffba\024" +
    "\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba" +
    "\033\uffba\035\uffba\001\002\000\026\007\070\011\033\024" +
    "\022\025\016\026\043\030\044\031\021\032\012\033\035" +
    "\035\011\001\002\000\006\004\ufff8\010\ufff8\001\002\000" +
    "\042\004\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\014\uffbc" +
    "\016\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031" +
    "\uffbc\032\uffbc\033\uffbc\035\uffbc\001\002\000\042\004\uffc2" +
    "\007\uffc2\010\uffc2\011\uffc2\012\uffc2\014\uffc2\016\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2" +
    "\033\uffc2\035\uffc2\001\002\000\006\004\ufffb\010\ufffb\001" +
    "\002\000\042\004\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4" +
    "\014\uffc4\016\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\035\uffc4\001\002\000\006" +
    "\004\ufff5\010\ufff5\001\002\000\004\035\077\001\002\000" +
    "\010\032\012\034\032\035\011\001\002\000\004\034\057" +
    "\001\002\000\014\007\051\016\045\027\042\032\012\035" +
    "\011\001\002\000\014\007\051\016\045\027\042\032\012" +
    "\035\011\001\002\000\036\004\ufff3\007\ufff3\010\ufff3\016" +
    "\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3" +
    "\032\ufff3\033\ufff3\034\054\035\ufff3\001\002\000\034\004" +
    "\ufff0\007\ufff0\010\ufff0\016\ufff0\024\ufff0\025\ufff0\026\ufff0" +
    "\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\035\ufff0\001" +
    "\002\000\014\007\051\016\045\027\042\032\012\035\011" +
    "\001\002\000\004\010\053\001\002\000\034\004\ufff1\007" +
    "\ufff1\010\ufff1\016\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1" +
    "\030\ufff1\031\ufff1\032\ufff1\033\ufff1\035\ufff1\001\002\000" +
    "\034\004\uffb3\007\uffb3\010\uffb3\016\uffb3\024\uffb3\025\uffb3" +
    "\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\035" +
    "\uffb3\001\002\000\034\004\ufff2\007\ufff2\010\ufff2\016\ufff2" +
    "\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032" +
    "\ufff2\033\ufff2\035\ufff2\001\002\000\034\004\uffef\007\uffef" +
    "\010\uffef\016\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030" +
    "\uffef\031\uffef\032\uffef\033\uffef\035\uffef\001\002\000\026" +
    "\007\062\011\033\024\022\025\016\026\043\030\044\031" +
    "\021\032\012\033\035\035\011\001\002\000\042\004\uffc9" +
    "\007\uffc9\010\uffc9\011\uffc9\012\uffc9\014\uffc9\016\uffc9\024" +
    "\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\035\uffc9\001\002\000\042\004\uffc8\007\uffc8\010" +
    "\uffc8\011\uffc8\012\uffc8\014\uffc8\016\uffc8\024\uffc8\025\uffc8" +
    "\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\035" +
    "\uffc8\001\002\000\024\007\070\024\022\025\016\026\043" +
    "\030\044\031\021\032\012\033\035\035\011\001\002\000" +
    "\042\004\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\014\uffbf" +
    "\016\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031" +
    "\uffbf\032\uffbf\033\uffbf\035\uffbf\001\002\000\042\004\uffcb" +
    "\007\uffcb\010\uffcb\011\uffcb\012\uffcb\014\uffcb\016\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb" +
    "\033\uffcb\035\uffcb\001\002\000\030\004\uffc7\007\uffc7\010" +
    "\uffc7\012\uffc7\014\uffc7\016\uffc7\024\uffc7\025\uffc7\027\uffc7" +
    "\032\uffc7\035\uffc7\001\002\000\030\004\uffc5\007\uffc5\010" +
    "\uffc5\012\uffc5\014\uffc5\016\uffc5\024\uffc5\025\uffc5\027\uffc5" +
    "\032\uffc5\035\uffc5\001\002\000\004\010\073\001\002\000" +
    "\024\007\070\024\022\025\016\026\043\030\044\031\021" +
    "\032\012\033\035\035\011\001\002\000\004\010\072\001" +
    "\002\000\030\004\uffc6\007\uffc6\010\uffc6\012\uffc6\014\uffc6" +
    "\016\uffc6\024\uffc6\025\uffc6\027\uffc6\032\uffc6\035\uffc6\001" +
    "\002\000\042\004\uffca\007\uffca\010\uffca\011\uffca\012\uffca" +
    "\014\uffca\016\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\035\uffca\001\002\000\042" +
    "\004\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\014\uffb8\016" +
    "\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8" +
    "\032\uffb8\033\uffb8\035\uffb8\001\002\000\042\004\uffb9\007" +
    "\uffb9\010\uffb9\011\uffb9\012\uffb9\014\uffb9\016\uffb9\024\uffb9" +
    "\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033" +
    "\uffb9\035\uffb9\001\002\000\042\004\uffbb\007\uffbb\010\uffbb" +
    "\011\uffbb\012\uffbb\014\uffbb\016\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\035\uffbb" +
    "\001\002\000\036\004\uffee\007\uffee\010\uffee\016\uffee\024" +
    "\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee" +
    "\033\uffee\034\054\035\uffee\001\002\000\034\004\uffed\007" +
    "\uffed\010\uffed\016\uffed\024\uffed\025\uffed\026\uffed\027\uffed" +
    "\030\uffed\031\uffed\032\uffed\033\uffed\035\uffed\001\002\000" +
    "\006\012\uffea\014\107\001\002\000\004\012\106\001\002" +
    "\000\006\012\uffec\014\104\001\002\000\026\007\070\011" +
    "\033\024\022\025\016\026\043\030\044\031\021\032\012" +
    "\033\035\035\011\001\002\000\004\012\uffeb\001\002\000" +
    "\042\004\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\014\uffe8" +
    "\016\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\032\uffe8\033\uffe8\035\uffe8\001\002\000\026\007\070" +
    "\011\033\024\022\025\016\026\043\030\044\031\021\032" +
    "\012\033\035\035\011\001\002\000\004\012\uffe9\001\002" +
    "\000\026\004\uffda\007\uffda\010\uffda\011\uffda\016\uffda\024" +
    "\uffda\025\uffda\027\uffda\032\uffda\035\uffda\001\002\000\022" +
    "\005\uffd2\006\uffd2\007\uffd2\011\uffb4\023\uffd2\032\uffd2\035" +
    "\uffd2\036\uffd2\001\002\000\026\004\uffdb\007\uffdb\010\uffdb" +
    "\011\uffdb\016\uffdb\024\uffdb\025\uffdb\027\uffdb\032\uffdb\035" +
    "\uffdb\001\002\000\004\011\126\001\002\000\020\005\124" +
    "\006\123\007\117\023\120\032\012\035\011\036\113\001" +
    "\002\000\026\004\uffd9\007\uffd9\010\uffd9\011\uffd9\016\uffd9" +
    "\024\uffd9\025\uffd9\027\uffd9\032\uffd9\035\uffd9\001\002\000" +
    "\014\007\117\023\120\032\012\035\011\036\113\001\002" +
    "\000\014\007\117\023\120\032\012\035\011\036\113\001" +
    "\002\000\004\010\122\001\002\000\026\004\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\016\uffdc\024\uffdc\025\uffdc\027\uffdc\032" +
    "\uffdc\035\uffdc\001\002\000\020\005\uffd3\006\uffd3\007\uffd3" +
    "\023\uffd3\032\uffd3\035\uffd3\036\uffd3\001\002\000\020\005" +
    "\uffd4\006\uffd4\007\uffd4\023\uffd4\032\uffd4\035\uffd4\036\uffd4" +
    "\001\002\000\024\004\uffdd\007\uffdd\010\uffdd\016\uffdd\024" +
    "\uffdd\025\uffdd\027\uffdd\032\uffdd\035\uffdd\001\002\000\010" +
    "\005\127\006\131\014\uffd7\001\002\000\006\012\uffd6\014" +
    "\uffd6\001\002\000\004\014\132\001\002\000\006\012\uffd5" +
    "\014\uffd5\001\002\000\010\005\127\006\131\014\uffd7\001" +
    "\002\000\004\014\134\001\002\000\010\005\127\006\131" +
    "\014\uffd7\001\002\000\004\014\136\001\002\000\010\005" +
    "\127\006\131\014\uffd7\001\002\000\004\014\140\001\002" +
    "\000\010\005\127\006\131\014\uffd7\001\002\000\004\014" +
    "\142\001\002\000\010\005\127\006\131\014\uffd7\001\002" +
    "\000\004\014\144\001\002\000\010\005\127\006\131\012" +
    "\uffd7\001\002\000\004\012\146\001\002\000\026\004\uffd8" +
    "\007\uffd8\010\uffd8\011\uffd8\016\uffd8\024\uffd8\025\uffd8\027" +
    "\uffd8\032\uffd8\035\uffd8\001\002\000\004\010\150\001\002" +
    "\000\006\004\ufffa\010\ufffa\001\002\000\026\007\062\011" +
    "\033\024\022\025\016\026\043\030\044\031\021\032\012" +
    "\033\035\035\011\001\002\000\042\004\uffb7\007\uffb7\010" +
    "\uffb7\011\uffb7\012\uffb7\014\uffb7\016\uffb7\024\uffb7\025\uffb7" +
    "\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\035" +
    "\uffb7\001\002\000\026\007\062\011\033\024\022\025\016" +
    "\026\043\030\044\031\021\032\012\033\035\035\011\001" +
    "\002\000\004\034\155\001\002\000\026\007\062\011\033" +
    "\024\022\025\016\026\043\030\044\031\021\032\012\033" +
    "\035\035\011\001\002\000\042\004\uffbd\007\uffbd\010\uffbd" +
    "\011\uffbd\012\uffbd\014\uffbd\016\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\035\uffbd" +
    "\001\002\000\042\004\uffbe\007\uffbe\010\uffbe\011\uffbe\012" +
    "\uffbe\014\uffbe\016\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\033\uffbe\035\uffbe\001\002\000" +
    "\026\007\062\011\033\024\022\025\016\026\043\030\044" +
    "\031\021\032\012\033\035\035\011\001\002\000\042\004" +
    "\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\014\uffb6\016\uffb6" +
    "\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032" +
    "\uffb6\033\uffb6\035\uffb6\001\002\000\006\015\ufffc\017\ufffc" +
    "\001\002\000\004\002\000\001\002\000\004\002\001\001" +
    "\002\000\010\020\uffe6\021\171\022\170\001\002\000\004" +
    "\004\226\001\002\000\004\020\224\001\002\000\012\007" +
    "\177\023\200\032\012\035\011\001\002\000\004\034\174" +
    "\001\002\000\004\004\uffe4\001\002\000\004\004\uffe3\001" +
    "\002\000\004\004\uffe2\001\002\000\022\007\uffde\010\uffde" +
    "\016\uffde\024\uffde\025\uffde\027\uffde\032\uffde\035\uffde\001" +
    "\002\000\022\007\uffe0\010\uffe0\016\uffe0\024\uffe0\025\uffe0" +
    "\027\uffe0\032\uffe0\035\uffe0\001\002\000\012\007\177\023" +
    "\200\032\012\035\011\001\002\000\004\032\221\001\002" +
    "\000\020\007\207\016\045\024\202\025\205\027\042\032" +
    "\012\035\011\001\002\000\020\007\207\016\045\024\202" +
    "\025\205\027\042\032\012\035\011\001\002\000\024\004" +
    "\uffce\007\uffce\010\uffce\016\uffce\024\uffce\025\uffce\027\uffce" +
    "\032\uffce\035\uffce\001\002\000\004\004\uffe1\001\002\000" +
    "\020\007\207\016\045\024\202\025\205\027\042\032\012" +
    "\035\011\001\002\000\024\004\uffcf\007\uffcf\010\uffcf\016" +
    "\uffcf\024\uffcf\025\uffcf\027\uffcf\032\uffcf\035\uffcf\001\002" +
    "\000\020\007\207\016\045\024\202\025\205\027\042\032" +
    "\012\035\011\001\002\000\024\007\070\024\022\025\016" +
    "\026\043\030\044\031\021\032\012\033\035\035\011\001" +
    "\002\000\024\004\uffd1\007\uffd1\010\uffd1\016\uffd1\024\uffd1" +
    "\025\uffd1\027\uffd1\032\uffd1\035\uffd1\001\002\000\004\010" +
    "\214\001\002\000\026\007\070\010\053\024\022\025\016" +
    "\026\043\030\044\031\021\032\012\033\035\035\011\001" +
    "\002\000\024\004\uffd0\007\uffd0\010\uffd0\016\uffd0\024\uffd0" +
    "\025\uffd0\027\uffd0\032\uffd0\035\uffd0\001\002\000\020\007" +
    "\207\016\045\024\202\025\205\027\042\032\012\035\011" +
    "\001\002\000\024\004\uffcc\007\uffcc\010\uffcc\016\uffcc\024" +
    "\uffcc\025\uffcc\027\uffcc\032\uffcc\035\uffcc\001\002\000\020" +
    "\007\207\016\045\024\202\025\205\027\042\032\012\035" +
    "\011\001\002\000\024\004\uffcd\007\uffcd\010\uffcd\016\uffcd" +
    "\024\uffcd\025\uffcd\027\uffcd\032\uffcd\035\uffcd\001\002\000" +
    "\020\005\uffd2\006\uffd2\007\uffd2\023\uffd2\032\uffd2\035\uffd2" +
    "\036\uffd2\001\002\000\004\010\223\001\002\000\022\007" +
    "\uffdf\010\uffdf\016\uffdf\024\uffdf\025\uffdf\027\uffdf\032\uffdf" +
    "\035\uffdf\001\002\000\004\004\225\001\002\000\004\002" +
    "\uffe7\001\002\000\010\020\uffe6\021\171\022\170\001\002" +
    "\000\004\020\uffe5\001\002\000\004\013\231\001\002\000" +
    "\036\007\024\011\033\016\045\023\031\024\022\025\016" +
    "\026\043\027\042\030\044\031\021\032\012\033\035\034" +
    "\032\035\011\001\002\000\004\004\233\001\002\000\006" +
    "\015\ufffd\017\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\010\002\005\003\004\004\006\001\001\000" +
    "\004\027\227\001\001\000\004\005\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\006\014\012\017\013\037\024\026\025\035\027\036\030" +
    "\025\031\027\034\022\035\016\036\024\037\040\040\033" +
    "\001\001\000\002\001\001\000\024\012\060\013\037\024" +
    "\026\025\035\027\063\030\025\031\027\035\057\042\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\012\060\013\037\024\026\025\035\027\063" +
    "\030\025\031\027\035\057\042\150\001\001\000\002\001" +
    "\001\000\034\006\146\012\017\013\037\024\026\025\035" +
    "\027\036\030\025\031\027\034\022\035\016\036\024\037" +
    "\040\040\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\021\114\027" +
    "\110\032\113\040\115\001\001\000\002\001\001\000\026" +
    "\010\102\012\100\013\037\024\026\025\035\027\064\030" +
    "\025\031\027\035\065\041\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\026\075\027\074\037\073\001\001\000\002\001\001\000" +
    "\010\011\045\027\046\036\047\001\001\000\010\011\055" +
    "\027\046\036\047\001\001\000\004\043\054\001\001\000" +
    "\002\001\001\000\010\011\051\027\046\036\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\012\060\013\037" +
    "\024\026\025\035\027\063\030\025\031\027\035\057\042" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\010\066\013\037\024\026\025\035\027\064\030\025\031" +
    "\027\035\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\010\070\013\037\024\026\025\035\027\064\030\025" +
    "\031\027\035\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\010\102\012\100\013\037\024\026\025\035\027" +
    "\064\030\025\031\027\035\065\041\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\010\102\012\100\013" +
    "\037\024\026\025\035\027\064\030\025\031\027\035\065" +
    "\041\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\027\110\032\124\040\115\001\001\000\002\001\001\000" +
    "\010\027\110\032\120\040\115\001\001\000\010\027\110" +
    "\032\113\040\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\132\001\001\000\002" +
    "\001\001\000\004\033\134\001\001\000\002\001\001\000" +
    "\004\033\136\001\001\000\002\001\001\000\004\033\140" +
    "\001\001\000\002\001\001\000\004\033\142\001\001\000" +
    "\002\001\001\000\004\033\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\012\060\013\037\024\026\025\035\027\063\030\025" +
    "\031\027\035\057\042\151\001\001\000\002\001\001\000" +
    "\024\012\060\013\037\024\026\025\035\027\063\030\025" +
    "\031\027\035\057\042\156\001\001\000\002\001\001\000" +
    "\024\012\060\013\037\024\026\025\035\027\063\030\025" +
    "\031\027\035\057\042\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\012\060\013\037\024\026\025\035" +
    "\027\063\030\025\031\027\035\057\042\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\166\015\171\016\165\017\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\200" +
    "\027\175\034\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\221\027\175\034\174\001" +
    "\001\000\004\021\114\001\001\000\016\011\207\020\203" +
    "\022\205\023\202\027\046\036\047\001\001\000\016\011" +
    "\207\020\216\022\205\023\202\027\046\036\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\011\207\020" +
    "\214\022\205\023\202\027\046\036\047\001\001\000\002" +
    "\001\001\000\016\011\212\020\211\022\205\023\202\027" +
    "\046\036\047\001\001\000\022\010\210\013\037\024\026" +
    "\025\035\027\064\030\025\031\027\035\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\010\210\013\037" +
    "\024\026\025\035\027\064\030\025\031\027\035\065\001" +
    "\001\000\002\001\001\000\016\011\207\020\215\022\205" +
    "\023\202\027\046\036\047\001\001\000\002\001\001\000" +
    "\016\011\207\020\217\022\205\023\202\027\046\036\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\226\015\171\016\165\017\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\006\231\012\017" +
    "\013\037\024\026\025\035\027\036\030\025\031\027\034" +
    "\022\035\016\036\024\037\040\040\033\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public void report_error(String message, Object info) {

    StringBuilder m = new StringBuilder("Error");
    if (info instanceof java_cup.runtime.Symbol) {
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
        if (s.left >= 0) {
            m.append(" in line "+(s.left+1));
            if (s.right >= 0)
                m.append(", column "+(s.right+1));
        }
    }
    m.append(" : "+message);
    System.err.println(m);
}

public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    System.exit(1);
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // velocity ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("velocity",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // identifiant ::= LETTER 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable((String)l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiant",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // identifiant ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable((String)s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiant",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sequence ::= SEQUENCE musical_element_and_note_sequence musical_element_and_note_sequence 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sequence((IMusicalElement)e1,(IMusicalElement)e2) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sequence",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // chord ::= CHORD musical_element_and_note_sequence musical_element_and_note_sequence 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Chord((IMusicalElement)e1,(IMusicalElement)e2) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chord",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // time ::= time_definition 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("time",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // time ::= identifiant 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("time",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // time_definition ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Time((int)n) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("time_definition",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // complex_note ::= REST time 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Rest((ITime)t) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("complex_note",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // complex_note ::= COMPLEXNOTE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ComplexNote.parse(c) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("complex_note",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // transpose ::= TRANSPOSE MINUS NUMBER musical_element_and_note_sequence 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Transpose((int)-n,(IMusicalElement)m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transpose",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // transpose ::= TRANSPOSE NUMBER musical_element_and_note_sequence 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Transpose((int)n,(IMusicalElement)m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transpose",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // repeat ::= REPEAT NUMBER musical_element_and_note_sequence 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Repeat((int)n,(IMusicalElement)m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // musical_element_definition ::= transpose 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("musical_element_definition",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // musical_element_definition ::= repeat 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("musical_element_definition",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // musical_element_definition ::= chord 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("musical_element_definition",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // musical_element_definition ::= sequence 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("musical_element_definition",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // musical_element_definition ::= complex_note 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("musical_element_definition",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // musical_element ::= musical_element_definition 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = m ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("musical_element",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // musical_element ::= LPAREN musical_element RPAREN 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = m ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("musical_element",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // musical_element ::= identifiant 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("musical_element",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // musical_element_and_note_sequence ::= note_sequence 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("musical_element_and_note_sequence",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // musical_element_and_note_sequence ::= musical_element_definition 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = m ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("musical_element_and_note_sequence",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // musical_element_and_note_sequence ::= LPAREN musical_element RPAREN 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = m ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("musical_element_and_note_sequence",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // musical_element_and_note_sequence ::= identifiant 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("musical_element_and_note_sequence",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // playable_sequence ::= SEQUENCE playable_element playable_element 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PlayableSequence((IPlayableElement)e1,(IPlayableElement)e2) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("playable_sequence",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // playable_chord ::= CHORD playable_element playable_element 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PlayableChord((IPlayableElement)e1,(IPlayableElement)e2) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("playable_chord",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // playable_element ::= playable_sequence 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("playable_element",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // playable_element ::= playable_chord 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("playable_element",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // playable_element ::= LPAREN playable_element RPAREN 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("playable_element",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // playable_element ::= instrument musical_element 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PlayableElement((IInstrument)i,(IMusicalElement)m) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("playable_element",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // note ::= LETTER 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Note.note(l) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // note ::= note MINUS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ((Note)n).decr(2) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // note ::= note PLUS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ((Note)n).incr(1) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // alteration ::= MINUS 
            {
              Object RESULT =null;
		 RESULT = new Boolean(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alteration",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // alteration ::= PLUS 
            {
              Object RESULT =null;
		 RESULT = new Boolean(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alteration",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // alteration ::= 
            {
              Object RESULT =null;
		 RESULT = null ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alteration",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // scale_redefinition ::= SCALE scale_type LACCOL alteration COMA alteration COMA alteration COMA alteration COMA alteration COMA alteration COMA alteration RACCOL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AlterableScale((IScale)s,(Boolean)a1,(Boolean)a2,(Boolean)a3,(Boolean)a4,(Boolean)a5,(Boolean)a6,(Boolean)a7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scale_redefinition",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // scale_type ::= scale_redefinition 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scale_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // scale_type ::= identifiant 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=i ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scale_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // scale_type ::= SCALENAME 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ScaleName.scaleName(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scale_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // scale_type ::= LPAREN scale_type RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scale_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // scale_definition ::= SCALE note scale_type 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Scale((Note)n,(IScale)s) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scale_definition",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // scale ::= scale_definition 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scale",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // scale ::= LPAREN scale RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scale",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // scale ::= identifiant 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scale",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // play ::= PLAY scale playable_element 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Play((IPlayableScale)s,(IPlayableElement)p) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tempo ::= TEMPO NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Tempo((int)n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tempo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruction ::= play 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruction ::= tempo 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instructions ::= instruction SEMI instructions 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Body((IInstruction)i,(Body)is) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instructions ::= 
            {
              Object RESULT =null;
		 RESULT = null ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // body ::= BEGIN instructions END SEMI 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = i ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // note_sequence ::= LACCOL musical_element_list RACCOL 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note_sequence",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // musical_element_list ::= note_sequence COMA musical_element_list 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Chord((IMusicalElement)s,(IMusicalElement)n) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("musical_element_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // musical_element_list ::= note_sequence 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("musical_element_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // musical_element_list ::= musical_element COMA musical_element_list 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sequence((IMusicalElement)e,(IMusicalElement)n) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("musical_element_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // musical_element_list ::= musical_element 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("musical_element_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instrument_definition ::= INSTRU STRING velocity 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstrumentWithVelocity(Instrument.instrument(s),(int)v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrument_definition",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instrument_definition ::= INSTRU STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Instrument.instrument(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrument_definition",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instrument_definition ::= ENS instrument instrument 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Ens((IInstrument)i1,(IInstrument)i2) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrument_definition",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instrument ::= instrument_definition 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrument",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instrument ::= LPAREN instrument RPAREN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrument",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instrument ::= identifiant velocity 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstrumentWithVelocity((IInstrument)i,(int)v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrument",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instrument ::= identifiant 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrument",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaration ::= note_sequence 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration ::= time_definition 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration ::= instrument_definition 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= musical_element_definition 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = m ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= scale_redefinition 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= scale_definition 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= LPAREN declaration RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= identifiant 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // nedeclarations ::= nedeclarations LET identifiant EQUAL declaration SEMI 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Declarations env = new Declarations(new   Declaration((Variable)i,(IDeclarable)d),(Declarations)ds) ;
        RESULT = env ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nedeclarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // nedeclarations ::= LET identifiant EQUAL declaration SEMI 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Declarations env = new Declarations(new Declaration((Variable)i,(IDeclarable)d),null) ;
        RESULT = env ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nedeclarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= nedeclarations 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarations ::= 
            {
              Object RESULT =null;
		 RESULT = null ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= music EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // music ::= declarations body 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Music((Declarations)d,(Body)b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("music",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

