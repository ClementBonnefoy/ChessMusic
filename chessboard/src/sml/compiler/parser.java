
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Apr 01 18:00:22 CEST 2015
//----------------------------------------------------

package sml.compiler;

import sml.elements.*;
import sml.interfaces.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Apr 01 18:00:22 CEST 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\004\000\002\003" +
    "\002\000\002\003\003\000\002\004\007\000\002\004\010" +
    "\000\002\006\003\000\002\006\005\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\005\000\002\006\003\000\002\011\003\000\002\011" +
    "\005\000\002\011\003\000\002\034\005\000\002\034\004" +
    "\000\002\012\003\000\002\012\005\000\002\005\006\000" +
    "\002\014\002\000\002\014\005\000\002\016\003\000\002" +
    "\016\003\000\002\015\004\000\002\017\005\000\002\007" +
    "\003\000\002\007\005\000\002\007\003\000\002\032\005" +
    "\000\002\030\005\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\036\023\000\002\031\002\000\002" +
    "\031\003\000\002\031\003\000\002\021\004\000\002\021" +
    "\004\000\002\021\003\000\002\020\004\000\002\020\005" +
    "\000\002\020\003\000\002\020\003\000\002\022\005\000" +
    "\002\023\005\000\002\010\003\000\002\010\005\000\002" +
    "\010\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\013\003\000\002\013\004\000\002\035\003" +
    "\000\002\026\003\000\002\026\003\000\002\025\005\000" +
    "\002\024\005\000\002\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\006\015\004\017\uffff\001\002\000\006\030" +
    "\012\033\011\001\002\000\004\017\135\001\002\000\004" +
    "\002\133\001\002\000\006\015\010\017\ufffe\001\002\000" +
    "\006\030\012\033\011\001\002\000\040\004\uffc3\007\uffc3" +
    "\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\016\uffc3\024" +
    "\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\033\uffc3" +
    "\001\002\000\040\004\uffc2\007\uffc2\010\uffc2\011\uffc2\012" +
    "\uffc2\013\uffc2\014\uffc2\016\uffc2\024\uffc2\025\uffc2\026\uffc2" +
    "\027\uffc2\030\uffc2\031\uffc2\033\uffc2\001\002\000\004\013" +
    "\014\001\002\000\032\007\022\011\026\016\040\023\025" +
    "\024\020\025\016\026\037\027\036\030\012\031\032\032" +
    "\027\033\011\001\002\000\004\004\132\001\002\000\020" +
    "\007\124\024\020\025\016\026\037\030\012\031\032\033" +
    "\011\001\002\000\006\004\ufff7\010\ufff7\001\002\000\020" +
    "\007\124\024\020\025\016\026\037\030\012\031\032\033" +
    "\011\001\002\000\006\004\ufff9\010\ufff9\001\002\000\032" +
    "\007\022\011\026\016\040\023\025\024\020\025\016\026" +
    "\037\027\036\030\012\031\032\032\027\033\011\001\002" +
    "\000\006\004\ufff6\010\ufff6\001\002\000\030\004\uffcc\007" +
    "\uffcc\010\uffcc\016\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\033\uffcc\001\002\000\014\007\067\023" +
    "\070\030\062\033\011\034\063\001\002\000\006\026\037" +
    "\031\032\001\002\000\034\004\uffc8\007\uffc8\010\uffc8\012" +
    "\uffc8\014\uffc8\016\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\033\uffc8\001\002\000\006\004\ufff8\010" +
    "\ufff8\001\002\000\030\004\uffcb\007\uffcb\010\uffcb\016\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\033" +
    "\uffcb\001\002\000\034\004\uffca\007\uffca\010\uffca\012\uffca" +
    "\014\uffca\016\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030" +
    "\uffca\031\uffca\033\uffca\001\002\000\006\004\ufffb\010\ufffb" +
    "\001\002\000\030\004\uffcd\007\uffcd\010\uffcd\016\uffcd\024" +
    "\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\033\uffcd" +
    "\001\002\000\006\004\ufff4\010\ufff4\001\002\000\004\033" +
    "\053\001\002\000\010\030\012\032\027\033\011\001\002" +
    "\000\014\007\044\016\040\027\036\030\012\033\011\001" +
    "\002\000\014\007\044\016\040\027\036\030\012\033\011" +
    "\001\002\000\030\004\ufff3\007\ufff3\010\ufff3\016\ufff3\024" +
    "\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\033\ufff3" +
    "\001\002\000\030\004\ufff1\007\ufff1\010\ufff1\016\ufff1\024" +
    "\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\033\ufff1" +
    "\001\002\000\014\007\044\016\040\027\036\030\012\033" +
    "\011\001\002\000\004\010\046\001\002\000\030\004\ufff2" +
    "\007\ufff2\010\ufff2\016\ufff2\024\ufff2\025\ufff2\026\ufff2\027" +
    "\ufff2\030\ufff2\031\ufff2\033\ufff2\001\002\000\030\004\ufff0" +
    "\007\ufff0\010\ufff0\016\ufff0\024\ufff0\025\ufff0\026\ufff0\027" +
    "\ufff0\030\ufff0\031\ufff0\033\ufff0\001\002\000\034\004\uffc6" +
    "\007\uffc6\010\uffc6\012\uffc6\014\uffc6\016\uffc6\024\uffc6\025" +
    "\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\033\uffc6\001\002" +
    "\000\034\004\uffc7\007\uffc7\010\uffc7\012\uffc7\014\uffc7\016" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\033\uffc7\001\002\000\034\004\uffc9\007\uffc9\010\uffc9\012" +
    "\uffc9\014\uffc9\016\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9" +
    "\030\uffc9\031\uffc9\033\uffc9\001\002\000\030\004\uffef\007" +
    "\uffef\010\uffef\016\uffef\024\uffef\025\uffef\026\uffef\027\uffef" +
    "\030\uffef\031\uffef\033\uffef\001\002\000\004\012\060\001" +
    "\002\000\006\012\uffee\014\056\001\002\000\006\026\037" +
    "\031\032\001\002\000\004\012\uffed\001\002\000\006\004" +
    "\ufff5\010\ufff5\001\002\000\026\004\uffdf\007\uffdf\010\uffdf" +
    "\011\uffdf\016\uffdf\024\uffdf\025\uffdf\027\uffdf\030\uffdf\033" +
    "\uffdf\001\002\000\022\005\uffd7\006\uffd7\007\uffd7\011\uffc2" +
    "\023\uffd7\030\uffd7\033\uffd7\034\uffd7\001\002\000\026\004" +
    "\uffe0\007\uffe0\010\uffe0\011\uffe0\016\uffe0\024\uffe0\025\uffe0" +
    "\027\uffe0\030\uffe0\033\uffe0\001\002\000\004\011\076\001" +
    "\002\000\020\005\074\006\073\007\067\023\070\030\012" +
    "\033\011\034\063\001\002\000\026\004\uffde\007\uffde\010" +
    "\uffde\011\uffde\016\uffde\024\uffde\025\uffde\027\uffde\030\uffde" +
    "\033\uffde\001\002\000\014\007\067\023\070\030\012\033" +
    "\011\034\063\001\002\000\014\007\067\023\070\030\012" +
    "\033\011\034\063\001\002\000\004\010\072\001\002\000" +
    "\026\004\uffe1\007\uffe1\010\uffe1\011\uffe1\016\uffe1\024\uffe1" +
    "\025\uffe1\027\uffe1\030\uffe1\033\uffe1\001\002\000\020\005" +
    "\uffd8\006\uffd8\007\uffd8\023\uffd8\030\uffd8\033\uffd8\034\uffd8" +
    "\001\002\000\020\005\uffd9\006\uffd9\007\uffd9\023\uffd9\030" +
    "\uffd9\033\uffd9\034\uffd9\001\002\000\024\004\uffe2\007\uffe2" +
    "\010\uffe2\016\uffe2\024\uffe2\025\uffe2\027\uffe2\030\uffe2\033" +
    "\uffe2\001\002\000\010\005\077\006\101\014\uffdc\001\002" +
    "\000\006\012\uffdb\014\uffdb\001\002\000\004\014\102\001" +
    "\002\000\006\012\uffda\014\uffda\001\002\000\010\005\077" +
    "\006\101\014\uffdc\001\002\000\004\014\104\001\002\000" +
    "\010\005\077\006\101\014\uffdc\001\002\000\004\014\106" +
    "\001\002\000\010\005\077\006\101\014\uffdc\001\002\000" +
    "\004\014\110\001\002\000\010\005\077\006\101\014\uffdc" +
    "\001\002\000\004\014\112\001\002\000\010\005\077\006" +
    "\101\014\uffdc\001\002\000\004\014\114\001\002\000\010" +
    "\005\077\006\101\012\uffdc\001\002\000\004\012\116\001" +
    "\002\000\026\004\uffdd\007\uffdd\010\uffdd\011\uffdd\016\uffdd" +
    "\024\uffdd\025\uffdd\027\uffdd\030\uffdd\033\uffdd\001\002\000" +
    "\004\010\120\001\002\000\006\004\ufffa\010\ufffa\001\002" +
    "\000\030\004\uffd0\007\uffd0\010\uffd0\016\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\033\uffd0\001\002" +
    "\000\030\004\uffce\007\uffce\010\uffce\016\uffce\024\uffce\025" +
    "\uffce\026\uffce\027\uffce\030\uffce\031\uffce\033\uffce\001\002" +
    "\000\020\007\124\024\020\025\016\026\037\030\012\031" +
    "\032\033\011\001\002\000\020\007\124\024\020\025\016" +
    "\026\037\030\012\031\032\033\011\001\002\000\004\010" +
    "\126\001\002\000\030\004\uffcf\007\uffcf\010\uffcf\016\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\033" +
    "\uffcf\001\002\000\030\004\uffc5\007\uffc5\010\uffc5\016\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\033" +
    "\uffc5\001\002\000\020\007\124\024\020\025\016\026\037" +
    "\030\012\031\032\033\011\001\002\000\030\004\uffc4\007" +
    "\uffc4\010\uffc4\016\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\033\uffc4\001\002\000\006\015\ufffc\017" +
    "\ufffc\001\002\000\004\002\000\001\002\000\004\002\001" +
    "\001\002\000\010\020\uffeb\021\141\022\140\001\002\000" +
    "\004\004\176\001\002\000\004\020\174\001\002\000\012" +
    "\007\147\023\150\030\012\033\011\001\002\000\004\032" +
    "\144\001\002\000\004\004\uffe9\001\002\000\004\004\uffe8" +
    "\001\002\000\004\004\uffe7\001\002\000\022\007\uffe3\010" +
    "\uffe3\016\uffe3\024\uffe3\025\uffe3\027\uffe3\030\uffe3\033\uffe3" +
    "\001\002\000\022\007\uffe5\010\uffe5\016\uffe5\024\uffe5\025" +
    "\uffe5\027\uffe5\030\uffe5\033\uffe5\001\002\000\012\007\147" +
    "\023\150\030\012\033\011\001\002\000\004\030\171\001" +
    "\002\000\020\007\157\016\040\024\152\025\155\027\036" +
    "\030\012\033\011\001\002\000\020\007\157\016\040\024" +
    "\152\025\155\027\036\030\012\033\011\001\002\000\024" +
    "\004\uffd3\007\uffd3\010\uffd3\016\uffd3\024\uffd3\025\uffd3\027" +
    "\uffd3\030\uffd3\033\uffd3\001\002\000\004\004\uffe6\001\002" +
    "\000\020\007\157\016\040\024\152\025\155\027\036\030" +
    "\012\033\011\001\002\000\024\004\uffd4\007\uffd4\010\uffd4" +
    "\016\uffd4\024\uffd4\025\uffd4\027\uffd4\030\uffd4\033\uffd4\001" +
    "\002\000\020\007\157\016\040\024\152\025\155\027\036" +
    "\030\012\033\011\001\002\000\020\007\124\024\020\025" +
    "\016\026\037\030\012\031\032\033\011\001\002\000\024" +
    "\004\uffd6\007\uffd6\010\uffd6\016\uffd6\024\uffd6\025\uffd6\027" +
    "\uffd6\030\uffd6\033\uffd6\001\002\000\004\010\164\001\002" +
    "\000\022\007\124\010\046\024\020\025\016\026\037\030" +
    "\012\031\032\033\011\001\002\000\024\004\uffd5\007\uffd5" +
    "\010\uffd5\016\uffd5\024\uffd5\025\uffd5\027\uffd5\030\uffd5\033" +
    "\uffd5\001\002\000\020\007\157\016\040\024\152\025\155" +
    "\027\036\030\012\033\011\001\002\000\024\004\uffd1\007" +
    "\uffd1\010\uffd1\016\uffd1\024\uffd1\025\uffd1\027\uffd1\030\uffd1" +
    "\033\uffd1\001\002\000\020\007\157\016\040\024\152\025" +
    "\155\027\036\030\012\033\011\001\002\000\024\004\uffd2" +
    "\007\uffd2\010\uffd2\016\uffd2\024\uffd2\025\uffd2\027\uffd2\030" +
    "\uffd2\033\uffd2\001\002\000\020\005\uffd7\006\uffd7\007\uffd7" +
    "\023\uffd7\030\uffd7\033\uffd7\034\uffd7\001\002\000\004\010" +
    "\173\001\002\000\022\007\uffe4\010\uffe4\016\uffe4\024\uffe4" +
    "\025\uffe4\027\uffe4\030\uffe4\033\uffe4\001\002\000\004\004" +
    "\175\001\002\000\004\002\uffec\001\002\000\010\020\uffeb" +
    "\021\141\022\140\001\002\000\004\020\uffea\001\002\000" +
    "\004\013\201\001\002\000\032\007\022\011\026\016\040" +
    "\023\025\024\020\025\016\026\037\027\036\030\012\031" +
    "\032\032\027\033\011\001\002\000\004\004\203\001\002" +
    "\000\006\015\ufffd\017\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\010\002\005\003\004\004\006\001\001\000" +
    "\004\027\177\001\001\000\004\005\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\006\014\013\033\024\023\025\030\027\032\032\020\033" +
    "\016\034\022\035\034\036\027\001\001\000\002\001\001" +
    "\000\016\010\127\013\033\024\023\025\030\027\120\033" +
    "\121\001\001\000\002\001\001\000\016\010\122\013\033" +
    "\024\023\025\030\027\120\033\121\001\001\000\002\001" +
    "\001\000\026\006\116\013\033\024\023\025\030\027\032" +
    "\032\020\033\016\034\022\035\034\036\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\064\027\060" +
    "\030\063\036\065\001\001\000\006\012\053\013\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\026\051\027\050" +
    "\035\047\001\001\000\010\011\040\027\041\034\042\001" +
    "\001\000\010\011\046\027\041\034\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\044\027\041\034" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\056\013\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\027\060\030\074\036" +
    "\065\001\001\000\002\001\001\000\010\027\060\030\070" +
    "\036\065\001\001\000\010\027\060\030\063\036\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\102\001\001\000\002\001\001\000\004\031" +
    "\104\001\001\000\002\001\001\000\004\031\106\001\001" +
    "\000\002\001\001\000\004\031\110\001\001\000\002\001" +
    "\001\000\004\031\112\001\001\000\002\001\001\000\004" +
    "\031\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\010\126\013\033\024\023\025\030\027" +
    "\120\033\121\001\001\000\016\010\124\013\033\024\023" +
    "\025\030\027\120\033\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\010\130\013\033" +
    "\024\023\025\030\027\120\033\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\136\015\141\016\135\017\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\150\027\145" +
    "\032\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\171\027\145\032\144\001\001\000" +
    "\004\021\064\001\001\000\016\011\157\020\153\022\155" +
    "\023\152\027\041\034\042\001\001\000\016\011\157\020" +
    "\166\022\155\023\152\027\041\034\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\011\157\020\164\022" +
    "\155\023\152\027\041\034\042\001\001\000\002\001\001" +
    "\000\016\011\162\020\161\022\155\023\152\027\041\034" +
    "\042\001\001\000\016\010\160\013\033\024\023\025\030" +
    "\027\120\033\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\010\160\013\033\024\023\025\030\027\120" +
    "\033\121\001\001\000\002\001\001\000\016\011\157\020" +
    "\165\022\155\023\152\027\041\034\042\001\001\000\002" +
    "\001\001\000\016\011\157\020\167\022\155\023\152\027" +
    "\041\034\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\176\015\141\016\135\017\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\006" +
    "\201\013\033\024\023\025\030\027\032\032\020\033\016" +
    "\034\022\035\034\036\027\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public void report_error(String message, Object info) {

    StringBuilder m = new StringBuilder("Error");
    if (info instanceof java_cup.runtime.Symbol) {
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
        if (s.left >= 0) {
            m.append(" in line "+(s.left+1));
            if (s.right >= 0)
                m.append(", column "+(s.right+1));
        }
    }
    m.append(" : "+message);
    System.err.println(m);
}

public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    System.exit(1);
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // identifiant ::= LETTER 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable((String)l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiant",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // identifiant ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable((String)s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiant",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sequence ::= SEQUENCE musical_element musical_element 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sequence((IMusicalElement)e1,(IMusicalElement)e2) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sequence",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // chord ::= CHORD musical_element musical_element 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Chord((IMusicalElement)e1,(IMusicalElement)e2) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chord",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // time ::= time_definition 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("time",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // time ::= identifiant 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("time",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // time_definition ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Time((int)n) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("time_definition",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // complex_note ::= REST time 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Rest((ITime)t) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("complex_note",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // complex_note ::= COMPLEXNOTE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ComplexNote.parse(c) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("complex_note",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // musical_element_definition ::= chord 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("musical_element_definition",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // musical_element_definition ::= sequence 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("musical_element_definition",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // musical_element_definition ::= complex_note 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("musical_element_definition",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // musical_element ::= musical_element_definition 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = m ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("musical_element",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // musical_element ::= LPAREN musical_element RPAREN 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = m ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("musical_element",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // musical_element ::= identifiant 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("musical_element",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // playable_sequence ::= SEQUENCE playable_element playable_element 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PlayableSequence((IPlayableElement)e1,(IPlayableElement)e2) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("playable_sequence",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // playable_chord ::= CHORD playable_element playable_element 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PlayableChord((IPlayableElement)e1,(IPlayableElement)e2) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("playable_chord",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // playable_element ::= playable_sequence 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("playable_element",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // playable_element ::= playable_chord 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("playable_element",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // playable_element ::= LPAREN playable_element RPAREN 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("playable_element",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // playable_element ::= instrument musical_element 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PlayableElement((IInstrument)i,(IMusicalElement)m) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("playable_element",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // note ::= LETTER 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Note.note(l) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // note ::= note MINUS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ((Note)n).decr(2) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // note ::= note PLUS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ((Note)n).incr(1) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // alteration ::= MINUS 
            {
              Object RESULT =null;
		 RESULT = new Boolean(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alteration",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // alteration ::= PLUS 
            {
              Object RESULT =null;
		 RESULT = new Boolean(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alteration",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // alteration ::= 
            {
              Object RESULT =null;
		 RESULT = null ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alteration",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // scale_redefinition ::= SCALE scale_type LACCOL alteration COMA alteration COMA alteration COMA alteration COMA alteration COMA alteration COMA alteration RACCOL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AlterableScale((IScale)s,(Boolean)a1,(Boolean)a2,(Boolean)a3,(Boolean)a4,(Boolean)a5,(Boolean)a6,(Boolean)a7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scale_redefinition",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // scale_type ::= scale_redefinition 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scale_type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // scale_type ::= identifiant 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=i ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scale_type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // scale_type ::= SCALENAME 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ScaleName.scaleName(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scale_type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // scale_type ::= LPAREN scale_type RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scale_type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // scale_definition ::= SCALE note scale_type 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Scale((Note)n,(IScale)s) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scale_definition",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // scale ::= scale_definition 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scale",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // scale ::= LPAREN scale RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scale",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // scale ::= identifiant 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scale",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // play ::= PLAY scale playable_element 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Play((IPlayableScale)s,(IPlayableElement)p) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tempo ::= TEMPO NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Tempo((int)n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tempo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruction ::= play 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruction ::= tempo 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instructions ::= instruction SEMI instructions 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Body((IInstruction)i,(Body)is) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instructions ::= 
            {
              Object RESULT =null;
		 RESULT = null ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // body ::= BEGIN instructions END SEMI 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = i ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // note_sequence ::= complex_note COMA note_sequence 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sequence((IMusicalElement)c,(IMusicalElement)n) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note_sequence",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // note_sequence ::= complex_note 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note_sequence",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instrument_definition ::= INSTRU STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Instrument.instrument(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrument_definition",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instrument_definition ::= ENS instrument instrument 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Ens((IInstrument)i1,(IInstrument)i2) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrument_definition",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instrument ::= instrument_definition 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrument",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instrument ::= LPAREN instrument RPAREN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrument",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instrument ::= identifiant 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrument",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaration ::= time_definition 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration ::= LACCOL note_sequence RACCOL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = n ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration ::= instrument_definition 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= musical_element_definition 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = m ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= scale_redefinition 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= scale_definition 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= LPAREN declaration RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= identifiant 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // nedeclarations ::= nedeclarations LET identifiant EQUAL declaration SEMI 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Declarations env = new Declarations(new   Declaration((Variable)i,(IDeclarable)d),(Declarations)ds) ;
        RESULT = env ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nedeclarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // nedeclarations ::= LET identifiant EQUAL declaration SEMI 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Declarations env = new Declarations(new                       Declaration((Variable)i,(IDeclarable)d),null) ;
        RESULT = env ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nedeclarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= nedeclarations 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarations ::= 
            {
              Object RESULT =null;
		 RESULT = null ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= music EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // music ::= declarations body 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Music((Declarations)d,(Body)b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("music",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

